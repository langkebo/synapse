# Grafana数据源配置
# 自动配置Prometheus数据源

apiVersion: 1

# 删除现有数据源配置
deleteDatasources:
  - name: Prometheus
    orgId: 1

# 数据源配置列表
datasources:
  # Prometheus主数据源
  - name: Prometheus
    type: prometheus
    access: proxy
    orgId: 1
    uid: prometheus
    url: http://prometheus:9090
    isDefault: true
    version: 1
    editable: true
    
    # 基本认证配置（如果需要）
    basicAuth: false
    basicAuthUser: ""
    basicAuthPassword: ""
    
    # TLS配置
    tlsAuth: false
    tlsAuthWithCACert: false
    tlsSkipVerify: true
    
    # 查询配置
    jsonData:
      # HTTP方法
      httpMethod: POST
      
      # 查询超时时间（秒）
      queryTimeout: 60s
      
      # 时间间隔
      timeInterval: 15s
      
      # 自定义查询参数
      customQueryParameters: ""
      
      # 启用范围查询
      rangeQuery: true
      
      # 启用即时查询
      instantQuery: true
      
      # 启用样本查询
      exemplarQuery: true
      
      # 缓存级别
      cacheLevel: "High"
      
      # 增量查询
      incrementalQuery: true
      
      # 禁用指标查找
      disableMetricsLookup: false
      
      # 自定义标签
      customLabels: 
        environment: "production"
        service: "synapse"
        
      # 告警管理器URL
      alertmanagerUid: "alertmanager"
      
      # 管理告警
      manageAlerts: true
      
      # 启用录制规则
      recordingRules: true
      
      # 启用告警规则
      alertingRules: true
      
      # 代理URL（如果需要）
      httpHeaderName1: ""
      httpHeaderValue1: ""
      
      # 连接超时
      timeout: 30
      
      # 保持连接
      keepCookies: []
      
    # 安全字段（加密存储）
    secureJsonData:
      # 如果使用基本认证
      basicAuthPassword: ""
      
      # 如果使用TLS客户端认证
      tlsClientCert: ""
      tlsClientKey: ""
      tlsCACert: ""
      
      # 自定义HTTP头
      httpHeaderValue1: ""

  # AlertManager数据源（可选）
  - name: AlertManager
    type: alertmanager
    access: proxy
    orgId: 1
    uid: alertmanager
    url: http://alertmanager:9093
    isDefault: false
    version: 1
    editable: true
    
    jsonData:
      # AlertManager实现类型
      implementation: "prometheus"
      
      # 处理注释
      handleGrafanaManagedAlerts: true
      
      # 超时设置
      timeout: 30
      
    secureJsonData: {}

  # Loki日志数据源（如果使用）
  - name: Loki
    type: loki
    access: proxy
    orgId: 1
    uid: loki
    url: http://loki:3100
    isDefault: false
    version: 1
    editable: true
    
    jsonData:
      # 最大行数
      maxLines: 1000
      
      # 超时设置
      timeout: 60
      
      # 派生字段
      derivedFields:
        - datasourceUid: "prometheus"
          matcherRegex: "traceID=(\\w+)"
          name: "TraceID"
          url: "http://jaeger:16686/trace/$${__value.raw}"
          
    secureJsonData: {}

  # Jaeger追踪数据源（如果使用）
  - name: Jaeger
    type: jaeger
    access: proxy
    orgId: 1
    uid: jaeger
    url: http://jaeger:16686
    isDefault: false
    version: 1
    editable: true
    
    jsonData:
      # 追踪到日志
      tracesToLogs:
        datasourceUid: "loki"
        tags: ["job", "instance", "pod", "namespace"]
        mappedTags: [{key: "service.name", value: "service"}]
        mapTagNamesEnabled: false
        spanStartTimeShift: "1h"
        spanEndTimeShift: "1h"
        filterByTraceID: false
        filterBySpanID: false
        
      # 追踪到指标
      tracesToMetrics:
        datasourceUid: "prometheus"
        tags: [{key: "service.name", value: "service"}, {key: "job"}]
        queries:
          - name: "Sample query"
            query: "sum(rate(tempo_spanmetrics_latency_bucket{$$__tags}[5m]))"
            
      # 服务图
      serviceMap:
        datasourceUid: "prometheus"
        
      # 节点图
      nodeGraph:
        enabled: true
        
    secureJsonData: {}

  # PostgreSQL数据源（用于直接查询数据库）
  - name: PostgreSQL
    type: postgres
    access: proxy
    orgId: 1
    uid: postgresql
    url: postgres:5432
    database: synapse
    user: synapse_user
    isDefault: false
    version: 1
    editable: true
    
    jsonData:
      # SSL模式
      sslmode: "disable"
      
      # 最大打开连接数
      maxOpenConns: 5
      
      # 最大空闲连接数
      maxIdleConns: 2
      
      # 连接最大生命周期
      connMaxLifetime: 14400
      
      # PostgreSQL版本
      postgresVersion: 1300
      
      # 时区
      timescaledb: false
      
    secureJsonData:
      password: "synapse_password"

  # Redis数据源（如果有Redis监控插件）
  - name: Redis
    type: redis-datasource
    access: proxy
    orgId: 1
    uid: redis
    url: redis://redis:6379
    isDefault: false
    version: 1
    editable: true
    
    jsonData:
      # 客户端类型
      client: "standalone"
      
      # 连接池大小
      poolSize: 5
      
      # 超时设置
      timeout: 10
      
      # 重试次数
      retries: 3
      
    secureJsonData:
      password: ""

# 通知渠道配置（已弃用，使用联系点代替）
# notifiers: []

# 联系点配置
contactPoints:
  - orgId: 1
    name: "default-email"
    receivers:
      - uid: "email-001"
        type: "email"
        settings:
          addresses: "admin@cjystx.top"
          subject: "Grafana Alert - {{ .GroupLabels.alertname }}"
          body: |
            {{ range .Alerts }}
            Alert: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            Labels:
            {{ range .Labels.SortedPairs }}
              {{ .Name }}: {{ .Value }}
            {{ end }}
            {{ end }}
        disableResolveMessage: false

  - orgId: 1
    name: "webhook-notifications"
    receivers:
      - uid: "webhook-001"
        type: "webhook"
        settings:
          url: "http://alertmanager:9093/api/v1/alerts"
          httpMethod: "POST"
          maxAlerts: 0
        disableResolveMessage: false

# 告警策略配置
policies:
  - orgId: 1
    receiver: "default-email"
    group_by: ["alertname", "cluster", "service"]
    group_wait: "10s"
    group_interval: "10s"
    repeat_interval: "1h"
    routes:
      - receiver: "webhook-notifications"
        matchers:
          - "severity = critical"
        group_wait: "5s"
        group_interval: "5s"
        repeat_interval: "30m"
        continue: true
        
      - receiver: "default-email"
        matchers:
          - "service =~ synapse.*"
        group_wait: "15s"
        group_interval: "15s"
        repeat_interval: "2h"
        
# 静默规则配置
muteTimings:
  - orgId: 1
    name: "maintenance-window"
    time_intervals:
      - times:
          - start_time: "02:00"
            end_time: "04:00"
        weekdays: ["saturday", "sunday"]
        months: ["1:12"]
        years: ["2024:2030"]
        days_of_month: ["1:31"]

# 模板配置
templates:
  - orgId: 1
    name: "chinese-template"
    template: |
      {{ define "chinese.title" }}
      [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join " " }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join " " }}{{ end }}){{ end }}
      {{ end }}
      
      {{ define "chinese.message" }}
      {{ range .Alerts }}
      告警名称: {{ .Annotations.summary }}
      告警描述: {{ .Annotations.description }}
      告警级别: {{ .Labels.severity }}
      触发时间: {{ .StartsAt.Format "2006-01-02 15:04:05" }}
      {{ if .EndsAt }}结束时间: {{ .EndsAt.Format "2006-01-02 15:04:05" }}{{ end }}
      
      标签信息:
      {{ range .Labels.SortedPairs }}
        {{ .Name }}: {{ .Value }}
      {{ end }}
      
      {{ if .Annotations.runbook_url }}处理手册: {{ .Annotations.runbook_url }}{{ end }}
      {{ if .Annotations.dashboard_url }}监控面板: {{ .Annotations.dashboard_url }}{{ end }}
      
      ---
      {{ end }}
      {{ end }}